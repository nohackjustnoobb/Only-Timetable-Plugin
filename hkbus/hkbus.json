{
  "id": "hkbus",
  "name": "HK-Bus",
  "version": "1.0.0",
  "description": "A plugin that supports most of the public transport in Hong Kong, powered by the HKBUS.APP API.",
  "repositoryUrl": "https://github.com/nohackjustnoobb/Only-Timetable-Plugin",
  "updatesUrl": "https://raw.githubusercontent.com/nohackjustnoobb/Only-Timetable-Plugin/refs/heads/static/hkbus/hkbus.json",
  "updateRoutesScript": "var i=(()=>{try{return!!(navigator&&navigator.userAgent&&navigator.userAgent.includes(\"Safari/\")&&!(navigator.userAgent.includes(\"Chrome/\")||navigator.userAgent.includes(\"Chromium/\")))}catch{return!1}})();var ne=new Intl.DateTimeFormat(\"en-US\",{hourCycle:\"h23\",timeZone:\"America/New_York\",year:\"numeric\",month:\"2-digit\",day:\"2-digit\",hour:\"2-digit\",minute:\"2-digit\",second:\"2-digit\"}).format(new Date(\"2014-06-25T04:00:00.123Z\"));var pe=60*1e3;async function y(){return fetch(\"https://data.hkbus.app/routeFareList.min.json\",{cache:\"no-store\"}).then(t=>t.json()).catch(()=>fetch(\"https://hkbus.github.io/hk-bus-crawling/routeFareList.min.json\",{cache:\"no-store\"}).then(t=>t.json()))}async function I(t){await sendMessage(\"saveRoutes\",t.map(e=>(e.meta&&(e.meta=JSON.stringify(e.meta)),e.source&&(e.source=JSON.stringify(e.source)),e)))}async function O(t){await sendMessage(\"saveStops\",t.map(e=>(e.name&&(e.name=JSON.stringify(e.name)),e.meta&&(e.meta=JSON.stringify(e.meta)),e)))}async function x(t){let e=await sendMessage(\"getValue\",t);return e??null}async function p(t,e){await sendMessage(\"setValue\",t,e)}var U=24*60*60*1e3;async function Y(){let t=await x(\"lastUpdate\");if(t&&Date.now()-Number(t)<U)return;let e=await y(),T=[];for(let[n,r]of Object.entries(e.stopList)){let o={id:n,name:r.name,lat:r.location.lat,long:r.location.lng,meta:e.stopMap[n]};T.push(o)}await O(T);let l={};for(let[n,r]of Object.entries(e.stopMap)){if(!e.stopList[n])throw new Error(`Invalid stop ID: ${n}`);for(let[o,c]of r)l[o]||(l[o]={}),l[o][c]=n}let S=(n,r)=>[n,r.map(o=>{if(l[n][o])return l[n][o];if(e.stopList[o])return o;throw new Error(`Invalid stop ID: ${o} for company: ${n}`)})],D=[];for(let[n,r]of Object.entries(e.routeList)){let o=Object.entries(r.stops).map(([u,a])=>S(u,a)),c={};for(let[u,a]of o){let h=r.bound[u],s=JSON.stringify({stops:a,bound:h});c[s]||(c[s]=[]),c[s].push(u)}for(let[u,a]of Object.entries(c)){let h=JSON.parse(u),s=h.stops,N=h.bound,f=JSON.parse(JSON.stringify(r));f.co=a,f.bound=Object.fromEntries(a.map(m=>[m,f.bound[m]])),f.stops=Object.fromEntries(a.map(m=>[m,f.stops[m]]));let w=r.route;Number(r.serviceType)>1&&(w+=\" \\u20F0\");let $={id:`${n}+${a.join(\"+\")}+${N}`,displayId:w,name:[...Object.values(r.orig),...Object.values(r.dest)].join(\"+\"),source:{en:a.join(\" / \").toLocaleUpperCase()},orig:s[0],dest:s[s.length-1],stops:s,meta:f};D.push($)}}await I(D),await p(\"serviceDayMap\",JSON.stringify(e.serviceDayMap)),await p(\"holidays\",JSON.stringify(e.holidays)),await p(\"stopList\",JSON.stringify(e.stopList)),await p(\"lastUpdate\",String(Date.now()))}var yt=Y;export{yt as default};\n",
  "getEtaScript": "var d=(()=>{try{return!!(navigator&&navigator.userAgent&&navigator.userAgent.includes(\"Safari/\")&&!(navigator.userAgent.includes(\"Chrome/\")||navigator.userAgent.includes(\"Chromium/\")))}catch{return!1}})(),U=(a,t)=>t.getDay()===0?!0:a.includes(String(t.getUTCFullYear())+String(t.getUTCMonth()+1).padStart(2,\"0\")+String(t.getUTCDate()).padStart(2,\"0\")),g=({holidays:a,serviceDayMap:t,date:i,freq:o})=>{if(o===null)return[];let n=(s,u)=>Object.keys(s).sort((r,f)=>r<f?-1:1).reduce((r,f)=>{let c=new Date(u.getTime());return c.setUTCHours(parseInt(f.slice(0,2),10)),c.setUTCMinutes(parseInt(f.slice(2),10)),c>=u&&r.push(String(c.getUTCFullYear())+\"-\"+String(c.getUTCMonth()+1).padStart(2,\"0\")+\"-\"+String(c.getUTCDate()).padStart(2,\"0\")+\"T\"+String(c.getUTCHours()).padStart(2,\"0\")+\":\"+String(c.getUTCMinutes()).padStart(2,\"0\")+\":00.000+08:00\"),r},[]),e=Array(24).fill(0).reduce((s,u,r)=>{let f=new Date(i.getTime());f.setUTCHours(f.getUTCHours()+8+r);for(let c in o)if(U(a,f)){if(t[c][0]===\"1\")return s.concat(n(o[c],f))}else if(t[c][f.getDay()])return s.concat(n(o[c],f)).sort();return s},[]);return[...new Set(e)].sort((s,u)=>s<u?-1:1)};function y({stopId:a,route:t,seq:i,serviceType:o,stops:n,co:e,bound:s}){return fetch(`https://data.etabus.gov.hk/v1/transport/kmb/eta/${a}/${t}/${o}`,{cache:d?\"default\":\"no-store\"}).then(u=>u.json()).then(({data:u})=>u.filter(r=>r.dir===s).sort((r,f)=>Math.abs(r.seq-i)<Math.abs(f.seq-i)?-1:1).filter((r,f,c)=>r.seq===c[0].seq).filter(r=>e.length>1||o!==r.service_type||r.seq===i+1).filter(r=>n[n.length-1]===n[0]&&a===n[0]?r.seq===i+1:!0).map(r=>({eta:r.eta,remark:{zh:r.rmk_tc,en:r.rmk_en},dest:{zh:r.dest_tc,en:r.dest_en},co:\"kmb\"}))).catch(u=>(console.error(u),[]))}function x({stopId:a,route:t,bound:i,seq:o}){return fetch(`https://rt.data.gov.hk//v2/transport/citybus/eta/CTB/${a}/${t}`,{cache:d?\"default\":\"no-store\"}).then(n=>n.json()).then(({data:n})=>n.filter(e=>i.includes(e.dir)).sort((e,s)=>Math.abs(e.seq-o)<Math.abs(s.seq-o)?-1:1).filter((e,s,u)=>e.seq===u[0].seq).map(e=>({eta:e.eta,remark:{zh:e.rmk_tc,en:e.rmk_en},dest:{zh:e.dest_tc,en:e.dest_en},co:\"ctb\"}))).catch(n=>(console.error(n),[]))}function M({stopId:a,nlbId:t}){return fetch(\"https://rt.data.gov.hk/v1/transport/nlb/stop.php?action=estimatedArrivals\",{body:JSON.stringify({routeId:t,stopId:a,language:\"zh\"}),headers:{\"Content-Type\":\"text/plain\"},method:\"POST\",cache:d?\"default\":\"no-store\"}).then(i=>i.json()).then(({estimatedArrivals:i})=>i?i.filter(o=>o.estimatedArrivalTime).map(o=>({eta:o.estimatedArrivalTime.replace(\" \",\"T\")+\".000+08:00\",remark:{zh:\"\",en:\"\"},dest:{zh:\"\",en:\"\"},co:\"nlb\"})):[])}function N({stopId:a,route:t,language:i}){return fetch(\"https://rt.data.gov.hk/v1/transport/mtr/bus/getSchedule\",{method:\"POST\",cache:d?\"default\":\"no-store\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({language:i,routeName:t})}).then(o=>o.json()).then(({busStop:o})=>o.filter(({busStopId:n})=>n===a).reduce((n,{bus:e})=>[...n,...e.reduce((s,u)=>{let r=new Date(Date.now()+parseInt(u.arrivalTimeInSecond===\"108000\"?u.departureTimeInSecond:u.arrivalTimeInSecond,10)*1e3+288e5);return[...s,{eta:`${r.getUTCFullYear()}-${`0${r.getUTCMonth()+1}`.slice(-2)}-${`0${r.getUTCDate()}`.slice(-2)}T${`0${r.getUTCHours()}`.slice(-2)}:${`0${r.getMinutes()}`.slice(-2)}:${`0${r.getSeconds()}`.slice(-2)}+08:00`,remark:{[i]:u.busRemark||(u.isScheduled===\"1\"?i===\"en\"?\"Scheduled\":\"\\u9810\\u5B9A\\u73ED\\u6B21\":\"\")},dest:{zh:\"\",en:\"\"},co:\"lrtfeeder\"}]},[])],[]))}function I({gtfsId:a,stopId:t,bound:i,seq:o}){return fetch(`https://data.etagmb.gov.hk/eta/route-stop/${a}/${t}`,{cache:d?\"default\":\"no-store\"}).then(n=>n.json()).then(({data:n})=>n.filter(({route_seq:e})=>i===\"O\"&&e===1||i===\"I\"&&e===2).filter(({stop_seq:e})=>e===o+1).reduce((e,{enabled:s,eta:u,description_tc:r,description_en:f})=>[...e,...s?u.map(c=>{var m,p;return{eta:c.timestamp,remark:{zh:(m=c.remarks_tc)!==null&&m!==void 0?m:\"\",en:(p=c.remarks_en)!==null&&p!==void 0?p:\"\"},dest:{zh:\"\",en:\"\"},co:\"gmb\"}}):[{eta:null,remark:{zh:r??\"\",en:f??\"\"},dest:{zh:\"\",en:\"\"},co:\"gmb\"}]],[]))}function $({stopId:a,route:t,dest:i}){return fetch(`https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=${a.slice(2)}`,{cache:d?\"default\":\"no-store\"}).then(o=>o.json()).then(({platform_list:o})=>o.every(({end_service_status:n})=>n)?[{eta:null,remark:{zh:\"\\u6B64\\u7AD9\\u4ECA\\u65E5\\u670D\\u52D9\\u5DF2\\u7D93\\u7D42\\u6B62\",en:\"This stop's service for today has ended\"},dest:{zh:\"\",en:\"\"},co:\"lightRail\"}]:o.reduce((n,{route_list:e,platform_id:s})=>[...n,...(e??[]).filter(({route_no:u,dest_ch:r,dest_en:f,stop:c})=>t===u&&(r===i.zh||f.includes(\"Circular\"))&&c===0).map(({time_en:u,train_length:r})=>{let f=0;switch(u.toLowerCase()){case\"arriving\":case\"departing\":case\"-\":f=0;break;default:f=parseInt(u,10);break}let c=new Date(Date.now()+f*60*1e3+8*36e5);return{eta:`${c.getUTCFullYear()}-${`0${c.getUTCMonth()+1}`.slice(-2)}-${`0${c.getUTCDate()}`.slice(-2)}T${`0${c.getUTCHours()}`.slice(-2)}:${`0${c.getMinutes()}`.slice(-2)}:${`0${c.getSeconds()}`.slice(-2)}+08:00`,remark:{zh:`${s}\\u865F\\u6708\\u53F0 - ${Array(r).fill(\"\\u25AD\").join(\"\")}`,en:`Platform ${s} - ${Array(r).fill(\"\\u25AD\").join(\"\")}`},dest:{zh:\"\",en:\"\"},co:\"lightRail\"}},[])],[])).catch(o=>(console.error(o),[]))}function O({stopId:a,route:t,bound:i,stopList:o}){return fetch(`https://rt.data.gov.hk/v1/transport/mtr/getSchedule.php?line=${t}&sta=${a}`,{cache:d?\"default\":\"no-store\"}).catch(()=>fetch(`https://mtr.hkbus.app/?line=${t}&sta=${a}`,{cache:d?\"default\":\"no-store\"})).then(n=>n.json()).then(({data:n,message:e,status:s,url:u})=>{if(s===0){if(e&&typeof e==\"string\"){let r=e.replace(\"Please click here for more information.\",\"\").trim();return[{eta:null,remark:{zh:r,en:r},dest:{zh:\"\",en:\"\"},co:\"mtr\"}]}return[]}return n[`${t}-${a}`][i.endsWith(\"UT\")?\"UP\":\"DOWN\"].reduce((r,{time:f,plat:c,dest:m})=>[...r,{eta:f.replace(\" \",\"T\")+\"+08:00\",remark:{zh:`${c}\\u865F\\u6708\\u53F0`,en:`Platform ${c}`},dest:{zh:o[m].name.zh,en:o[m].name.en},co:\"mtr\"}],[])})}function S({route:a,seq:t,freq:i,holidays:o,serviceDayMap:n}){return t===1?Promise.resolve([]):fetch(`https://www.sunferry.com.hk/eta/?route=${a}`,{cache:d?\"default\":\"no-store\"}).then(e=>e.json()).then(({data:e})=>{throw new Error(\"\")}).catch(()=>{let e=new Date;return g({holidays:o,serviceDayMap:n,freq:i,date:new Date}).filter(s=>new Date(s).getTime()-e.getTime()<180*60*1e3).map(s=>({eta:s,remark:{zh:\"\\u9810\\u5B9A\\u73ED\\u6B21\",en:\"Scheduled\"},dest:{zh:\"\",en:\"\"},co:\"sunferry\"}))})}function z({stops:{fortuneferry:a},seq:t,holidays:i,freq:o,serviceDayMap:n}){if(t>=1)return Promise.resolve([]);let e=new Date;return Promise.resolve(g({holidays:i,serviceDayMap:n,freq:o,date:new Date}).filter(s=>new Date(s).getTime()-e.getTime()<180*60*1e3).map(s=>({eta:s,remark:{zh:\"\\u9810\\u5B9A\\u73ED\\u6B21\",en:\"Scheduled\"},dest:{zh:\"\",en:\"\"},co:\"fortuneferry\"})))}function k({freq:a,seq:t,holidays:i,serviceDayMap:o}){if(t>=1)return Promise.resolve([]);let n=new Date;return Promise.resolve(g({holidays:i,serviceDayMap:o,freq:a,date:new Date}).filter(e=>new Date(e).getTime()-n.getTime()<180*60*1e3).map(e=>({eta:e,remark:{zh:\"\\u9810\\u5B9A\\u73ED\\u6B21\",en:\"Scheduled\"},dest:{zh:\"\",en:\"\"},co:\"fortuneferry\"})))}var ce=new Intl.DateTimeFormat(\"en-US\",{hourCycle:\"h23\",timeZone:\"America/New_York\",year:\"numeric\",month:\"2-digit\",day:\"2-digit\",hour:\"2-digit\",minute:\"2-digit\",second:\"2-digit\"}).format(new Date(\"2014-06-25T04:00:00.123Z\"));var De=60*1e3;async function v({route:a,stops:t,bound:i,dest:o,freq:n,seq:e,serviceType:s,co:u,nlbId:r,gtfsId:f,stopList:c,language:m,holidays:p,serviceDayMap:w}){try{let l=[];for(let h of u)h===\"kmb\"&&t.kmb?l=l.concat(await y({route:a,stops:t.kmb,stopId:t.kmb[e],seq:e,co:u,serviceType:s,bound:i.kmb})):h===\"ctb\"&&t.ctb?l=l.concat(await x({stopId:t.ctb[e],route:a,bound:i.ctb,seq:e})):h===\"nlb\"&&t.nlb?l=l.concat(await M({stopId:t.nlb[e],nlbId:r})):h===\"lrtfeeder\"&&t.lrtfeeder?l=l.concat(await N({stopId:t.lrtfeeder[e],route:a,language:m})):h===\"gmb\"&&t.gmb?l=l.concat(await I({stopId:t.gmb[e],gtfsId:f,seq:e,bound:i.gmb})):h===\"lightRail\"&&t.lightRail?l=l.concat(await $({stopId:t.lightRail[e],route:a,dest:o})):h===\"mtr\"&&t.mtr?l=l.concat(await O({stopId:t.mtr[e],route:a,stopList:c,bound:i.mtr})):h===\"fortuneferry\"&&t.fortuneferry?l=l.concat(await z({stops:t,seq:e,stopList:c,freq:n,serviceDayMap:w,holidays:p})):h===\"sunferry\"&&t.sunferry?l=l.concat(await S({route:a,seq:e,holidays:p,serviceDayMap:w,freq:n})):h===\"hkkf\"&&t.hkkf&&(l=l.concat(await k({freq:n,seq:e,holidays:p,serviceDayMap:w})));return l.some(h=>h.eta)&&(l=l.filter(h=>h.eta)),l.sort((h,b)=>!h.eta||h.eta===\"\"?1:!b.eta||b.eta===\"\"||h.eta<b.eta?-1:1)}catch(l){return console.error(l),[]}}async function D(a){let t=await sendMessage(\"getValue\",a);return t??null}async function P(a,t){let i=JSON.parse(a.meta),o=JSON.parse(await D(\"serviceDayMap\")),n=JSON.parse(await D(\"stopList\")),e=JSON.parse(await D(\"holidays\")),s=a.stops.indexOf(t.id);return(await v({...i,seq:s,stopList:n,serviceDayMap:o,holidays:e,language:\"en\"})).map(r=>({isRealTime:r.remark.en==\"\",arrivalTime:Date.parse(r.eta)})).filter(r=>!isNaN(r.arrivalTime))}var gt=P;export{gt as default};\n"
}